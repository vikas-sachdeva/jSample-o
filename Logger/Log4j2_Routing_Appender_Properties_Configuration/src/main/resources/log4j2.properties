status = warn
name= properties_configuration

property.basePath = ./log/

# All keys in the configuration file can have any name.
# For example -
#
# appender.console.layout.type = PatternLayout
# appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
#
# can be written as -
#
# appender.console.myLayout.type = PatternLayout
# appender.console.myLayout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
#
# Similar way, name of all keys can be changed. Only point of precaution is same name should be used for same group of attributes.
#
# Like in above example, if 'layout' is changed to 'myLayout', it should be done for both attributes - type and pattern 


appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n

appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName=${basePath}/app.log
appender.rolling.filePattern=${basePath}app_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
appender.rolling.strategy.delete.ifLastModified.age = 2d

appender.routing.type = Routing
appender.routing.name = routingLogger
appender.routing.script.type = Script
appender.routing.script.name = RoutingCondition
appender.routing.script.language = JavaScript
# Condition is - if isLocalMachine VM argument is true (-DisLocalMachine=true),	
# then log messages in console else log messages in file.

# '\' is required at the end of the line in a multi line script to mark it as single value in properties file.
appender.routing.script.value = var imports = new JavaImporter(java.lang);									\
								with (imports) { 															\
									System.getProperty("isLocalMachine") == "true" ? "console" : "file";	\
								}
appender.routing.routes.type = Routes
appender.routing.routes.route1.type = Route
appender.routing.routes.route1.ref = consoleLogger
appender.routing.routes.route1.key = console
appender.routing.routes.route2.type = Route
appender.routing.routes.route2.ref = fileLogger
appender.routing.routes.route2.key = file


logger.jsample.name = jsample
logger.jsample.level = debug
logger.jsample.additivity = false
logger.jsample.appenderRef.routing.ref = routingLogger
 
rootLogger.level = error
rootLogger.additivity = false
rootLogger.appenderRef.routing.ref = routingLogger